#!/usr/bin/env python
# IBM_PROLOG_BEGIN_TAG
# 
# Copyright 2003,2016 IBM International Business Machines Corp.
# 
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
# 
#           http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#  implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# 
#  IBM_PROLOG_END_TAG

# Script to get a training task

from __future__ import print_function
import sys
import os
import os.path
import logging
import json

import argparse
import requests
import vapi_core as vapi


def createDLTask(name, dsid, usage, scenario, strategy, dnn_id, action):
    task = None

    msg = {
        "name" : name,
        "dataset_id" : dsid,
        "usage" : usage,
        "scenario" : scenario,
        "strategy" : strategy,
        "userdnn_id" : dnn_id,
        "action" : action
    }
    headers = {'Content-type': 'application/json'}
    url = vapi.cfg["baseUrl"] + "/dltasks"
    logging.debug("URL: {}".format(url))
    logging.debug("msg: {}".format(msg))
    
    rsp = vapi.post(url, data=json.dumps(msg))

    if vapi.rspOk(rsp):
        task = rsp.json()

    return task


# Uses arparse to parse commandline options
#
# argparse "results" class is returned
#
def getInputs():
    parser = argparse.ArgumentParser(description="Tool to create a DL Task")
    parser.add_argument('--name', action='store', dest="name", required=True,
                        help="name of the task")
    parser.add_argument('--classify', '--CIC', action="store_const", const="cic", dest="usage",
                        help="Task is to train for image classification")
    parser.add_argument('--detect', '--COD', action="store_const", const="cod", dest="usage",
                        help="Task is to train for object detection")
    parser.add_argument('--strategy', action="store", dest="strategy",
                        help="Training strategy to use")
    parser.add_argument('--dsname',  action='store', dest='dsname',
                        help="name of the dataset to train")
    parser.add_argument('--dsid', action='store', dest='dsid', required=True,
                        help="id of the dataset to train")
    parser.add_argument('--scenario', action='store', dest='scenario',
                        help="name of scenario upon which to base the training")
    parser.add_argument('--dnn_id', action='store', dest='dnn_id',
                        help="id of user created custom DNN")
    parser.add_argument('--action', action='store', dest='action',
                        help="training action to perform  " +
                             "One of 'pre-analysis', 'create', 'pre-analysis-cod', or 'create-cod-task'")

    try:
        args = parser.parse_args()

        # Ensure that required parameters are present
        if args.usage is None:
            raise argparse.ArgumentTypeError(
                "ERR: You must specify either '--classify' or '--detect'")
        
    except argparse.ArgumentTypeError as e:
        vapi.eprint("\n", e.args, "\n")
        parser.print_help(sys.stderr)
        args = None
        
    return args


if __name__ == '__main__':
    if vapi.loadCfgInfo() == 0:
        args = getInputs()

        if args is not None:
            vapi.eprint(args)
            task = createDLTask(args.name, args.dsid, args.usage, args.scenario,
                                args.strategy, args.dnn_id, args.action)
            if task is not None:
                print(json.dumps(task, indent=2))
        else:
            exit(2)
    else:
        exit(1)

