#!/usr/bin/env python
# IBM_PROLOG_BEGIN_TAG
# 
# Copyright 2003,2016 IBM International Business Machines Corp.
# 
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
# 
#           http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#  implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# 
#  IBM_PROLOG_END_TAG

# Script to get list of datasets 

from __future__ import print_function
import sys
import os
import os.path
import logging
import json

import argparse
import requests
import vapi_core as vapi


def getBGTasks(newer=None, status=None, tasktype=None):
    tasks = None
    qparms = {}
    
    if newer:
        qparms['newer_than'] = newer
    if status:
        qparms['status'] = status
    if tasktype:
        qparms['task_type'] = tasktype
        
    url = vapi.cfg["baseUrl"] + "/bgtasks/"
    logging.info("getBGTasks: URL= {}".format(url));
    rsp = vapi.get(url, params=qparms)
    if (vapi.rspOk(rsp)):
        tasks = rsp.json()
        
    return tasks

#-------------------------------------
# parse commandline options -- using argparse
#
# argparse "results" class is returned
#
def getInputs():
    parser = argparse.ArgumentParser(description="Tool to query back ground tasks")
    parser.add_argument('--user', action="store", dest="user", required=False,
                        help="user id for classifier endpoint")
    parser.add_argument('--passwd', action="store", dest="passwd", required=False,
                        help="passwd for classifier user")
    parser.add_argument('--newer', action="store", default=False, required=False,
                        help="Show tasks newer than given date (yyyy/MM/dd-HH:mm:ss")
    parser.add_argument('--task', action="store", default=False, required=False,
                        help="Show tasks of given type (e.g. auto-capture)")
    parser.add_argument('--status', action="store", default=False, required=False,
                        help="Show tasks with given status (e.g. 'working' or 'completed'")

    try:
        results = parser.parse_args()

    except argparse.ArgumentTypeError as e:
        logging.error(e.args)
        parser.print_help(sys.stderr)
        results = None

    return results


if (__name__ == '__main__'):

    args = getInputs()

    if (vapi.loadCfgInfo() == 0):
        tasks = getBGTasks(newer=args.newer, status=args.status, tasktype=args.task)
        if tasks != None:
            print(json.dumps(tasks, indent=2))
    else:
        exit(2)

