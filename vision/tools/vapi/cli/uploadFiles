#!/usr/bin/env python
# IBM_PROLOG_BEGIN_TAG
# 
# Copyright 2003,2016 IBM International Business Machines Corp.
# 
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
# 
#           http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#  implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# 
#  IBM_PROLOG_END_TAG

# Script to upload one of more files to a dataset
#
# usage -- uploadFiles.py --help
#

from __future__ import print_function
import sys
import os
import os.path
import logging
import json
import logging
import argparse

import requests
import vapi_core as vapi


def uploadFiles(ds_id, filepaths, cat_id, cat_name):
    result = None

    logging.info("@@@ filepaths={}".format(filepaths))
    
    files = []
    for filepath in filepaths:
        files.append(('files', open(filepath, 'rb')))

    url = vapi.cfg["baseUrl"] + "/datasets/" + ds_id + "/files"
    data = {"category_id" : cat_id, "scenario" : "" , "category_name" : cat_name}

    logging.info("uploadFiles: url={}, data={},files={}\n".format(url, data, files))
    rsp = vapi.post(url, data=data, files=files)

    if (vapi.rspOk(rsp)):
        result = rsp.json()
        
    else:
        vapi.eprint("ERR: One or more files failed to upload; {}".format(rsp.status_code))
        rc = 1

    return result


# Uses arparse to parse commandline options
#
# argparse "results" class is returned
#
def getInputs():
    parser = argparse.ArgumentParser(description="Tool to upload files to powerai vision")
    parser.add_argument('--dsid', action="store", dest="dsid", required=True,
                        help="ID of the dataset to upload into")
    parser.add_argument('--catid', action="store", dest="catid",
                        help="ID of the category to which the file belongs")
    parser.add_argument('--catname', action="store", dest="catname",
                        help="Name of category for '--catid'")
    parser.add_argument('filepaths', nargs="+",
                        help="space separated list of paths to upload.")

    try:
        results = parser.parse_args()
        if results.catid == None or results.catname == None:
            results.catid = ""
            results.catname = ""

    except argparse.ArgumentTypeError as e:
        vapi.eprint("\n", e.args, "\n")
        parser.print_help(sys.stderr);
        results = None
        
    return results

if (__name__ == '__main__'):
    args = getInputs()

    if args != None:
        if vapi.loadCfgInfo() == 0:

            uploadFiles(args.dsid, args.filepaths, args.catid, args.catname)
        else:
            exit(2)
    else:
        exit(1)
